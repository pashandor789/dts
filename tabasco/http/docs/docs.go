// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/build": {
            "put": {
                "description": "Put build.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Put build",
                "parameters": [
                    {
                        "description": "Build",
                        "name": "build",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.Build"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.Success"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.Error"
                        }
                    }
                }
            }
        },
        "/builds": {
            "get": {
                "description": "Retrieves a list of all builds.",
                "produces": [
                    "application/json"
                ],
                "summary": "Retrieves a list of all builds",
                "responses": {
                    "200": {
                        "description": "List of builds",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.Build"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.Error"
                        }
                    }
                }
            }
        },
        "/tests": {
            "put": {
                "description": "Put tests with multipart/form-data : meta.json, {i}_input, {i}_output or meta.json, tests.zip",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Put tests.",
                "parameters": [
                    {
                        "type": "file",
                        "description": "tests.zip with {i}_input, {i}_output",
                        "name": "tests.zip",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Meta file",
                        "name": "meta.json",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/http.Success"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/http.Error"
                        }
                    }
                }
            }
        },
        "/tests/{id}": {
            "get": {
                "description": "Get tests by the task ID provided as an URL parameter",
                "produces": [
                    "application/json"
                ],
                "summary": "Retrieve tests by task ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of tests",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.Test"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/http.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "http.Error": {
            "type": "object",
            "properties": {
                "payload": {},
                "status": {
                    "type": "string"
                }
            }
        },
        "http.Success": {
            "type": "object",
            "properties": {
                "payload": {},
                "status": {
                    "type": "string"
                }
            }
        },
        "types.Build": {
            "type": "object",
            "properties": {
                "execute_script": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "init_script": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "types.Test": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "task_id": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/types.TestType"
                }
            }
        },
        "types.TestType": {
            "type": "integer",
            "enum": [
                1,
                2
            ],
            "x-enum-varnames": [
                "Input",
                "Output"
            ]
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8000",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Task Batching Storage Coordinator API",
	Description:      "HTTP Tabasco",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
